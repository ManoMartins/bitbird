// Code generated by mockery v2.45.0. DO NOT EDIT.

package interfaces

import (
	context "context"

	interfaces "github.com/manomartins/bitbird/internal/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// MockNotifier is an autogenerated mock type for the Notifier type
type MockNotifier struct {
	mock.Mock
}

type MockNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotifier) EXPECT() *MockNotifier_Expecter {
	return &MockNotifier_Expecter{mock: &_m.Mock}
}

// AddApprovalEmoji provides a mock function with given fields: channelID, messageId
func (_m *MockNotifier) AddApprovalEmoji(channelID string, messageId string) error {
	ret := _m.Called(channelID, messageId)

	if len(ret) == 0 {
		panic("no return value specified for AddApprovalEmoji")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_AddApprovalEmoji_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddApprovalEmoji'
type MockNotifier_AddApprovalEmoji_Call struct {
	*mock.Call
}

// AddApprovalEmoji is a helper method to define mock.On call
//   - channelID string
//   - messageId string
func (_e *MockNotifier_Expecter) AddApprovalEmoji(channelID interface{}, messageId interface{}) *MockNotifier_AddApprovalEmoji_Call {
	return &MockNotifier_AddApprovalEmoji_Call{Call: _e.mock.On("AddApprovalEmoji", channelID, messageId)}
}

func (_c *MockNotifier_AddApprovalEmoji_Call) Run(run func(channelID string, messageId string)) *MockNotifier_AddApprovalEmoji_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockNotifier_AddApprovalEmoji_Call) Return(_a0 error) *MockNotifier_AddApprovalEmoji_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_AddApprovalEmoji_Call) RunAndReturn(run func(string, string) error) *MockNotifier_AddApprovalEmoji_Call {
	_c.Call.Return(run)
	return _c
}

// AddChangeRequestEmoji provides a mock function with given fields: channelID, messageId
func (_m *MockNotifier) AddChangeRequestEmoji(channelID string, messageId string) error {
	ret := _m.Called(channelID, messageId)

	if len(ret) == 0 {
		panic("no return value specified for AddChangeRequestEmoji")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_AddChangeRequestEmoji_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChangeRequestEmoji'
type MockNotifier_AddChangeRequestEmoji_Call struct {
	*mock.Call
}

// AddChangeRequestEmoji is a helper method to define mock.On call
//   - channelID string
//   - messageId string
func (_e *MockNotifier_Expecter) AddChangeRequestEmoji(channelID interface{}, messageId interface{}) *MockNotifier_AddChangeRequestEmoji_Call {
	return &MockNotifier_AddChangeRequestEmoji_Call{Call: _e.mock.On("AddChangeRequestEmoji", channelID, messageId)}
}

func (_c *MockNotifier_AddChangeRequestEmoji_Call) Run(run func(channelID string, messageId string)) *MockNotifier_AddChangeRequestEmoji_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockNotifier_AddChangeRequestEmoji_Call) Return(_a0 error) *MockNotifier_AddChangeRequestEmoji_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_AddChangeRequestEmoji_Call) RunAndReturn(run func(string, string) error) *MockNotifier_AddChangeRequestEmoji_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAvatarURL provides a mock function with given fields: ctx, userID
func (_m *MockNotifier) GetUserAvatarURL(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAvatarURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotifier_GetUserAvatarURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAvatarURL'
type MockNotifier_GetUserAvatarURL_Call struct {
	*mock.Call
}

// GetUserAvatarURL is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockNotifier_Expecter) GetUserAvatarURL(ctx interface{}, userID interface{}) *MockNotifier_GetUserAvatarURL_Call {
	return &MockNotifier_GetUserAvatarURL_Call{Call: _e.mock.On("GetUserAvatarURL", ctx, userID)}
}

func (_c *MockNotifier_GetUserAvatarURL_Call) Run(run func(ctx context.Context, userID string)) *MockNotifier_GetUserAvatarURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNotifier_GetUserAvatarURL_Call) Return(_a0 string, _a1 error) *MockNotifier_GetUserAvatarURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotifier_GetUserAvatarURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockNotifier_GetUserAvatarURL_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEmoji provides a mock function with given fields: channelID, messageId
func (_m *MockNotifier) RemoveEmoji(channelID string, messageId string) error {
	ret := _m.Called(channelID, messageId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEmoji")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_RemoveEmoji_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEmoji'
type MockNotifier_RemoveEmoji_Call struct {
	*mock.Call
}

// RemoveEmoji is a helper method to define mock.On call
//   - channelID string
//   - messageId string
func (_e *MockNotifier_Expecter) RemoveEmoji(channelID interface{}, messageId interface{}) *MockNotifier_RemoveEmoji_Call {
	return &MockNotifier_RemoveEmoji_Call{Call: _e.mock.On("RemoveEmoji", channelID, messageId)}
}

func (_c *MockNotifier_RemoveEmoji_Call) Run(run func(channelID string, messageId string)) *MockNotifier_RemoveEmoji_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockNotifier_RemoveEmoji_Call) Return(_a0 error) *MockNotifier_RemoveEmoji_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_RemoveEmoji_Call) RunAndReturn(run func(string, string) error) *MockNotifier_RemoveEmoji_Call {
	_c.Call.Return(run)
	return _c
}

// SendCommentNotification provides a mock function with given fields: channelID, messageId, comment
func (_m *MockNotifier) SendCommentNotification(channelID string, messageId string, comment string) error {
	ret := _m.Called(channelID, messageId, comment)

	if len(ret) == 0 {
		panic("no return value specified for SendCommentNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(channelID, messageId, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_SendCommentNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCommentNotification'
type MockNotifier_SendCommentNotification_Call struct {
	*mock.Call
}

// SendCommentNotification is a helper method to define mock.On call
//   - channelID string
//   - messageId string
//   - comment string
func (_e *MockNotifier_Expecter) SendCommentNotification(channelID interface{}, messageId interface{}, comment interface{}) *MockNotifier_SendCommentNotification_Call {
	return &MockNotifier_SendCommentNotification_Call{Call: _e.mock.On("SendCommentNotification", channelID, messageId, comment)}
}

func (_c *MockNotifier_SendCommentNotification_Call) Run(run func(channelID string, messageId string, comment string)) *MockNotifier_SendCommentNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNotifier_SendCommentNotification_Call) Return(_a0 error) *MockNotifier_SendCommentNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_SendCommentNotification_Call) RunAndReturn(run func(string, string, string) error) *MockNotifier_SendCommentNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SendDirectMessage provides a mock function with given fields: ctx, userID, message
func (_m *MockNotifier) SendDirectMessage(ctx context.Context, userID string, message string) error {
	ret := _m.Called(ctx, userID, message)

	if len(ret) == 0 {
		panic("no return value specified for SendDirectMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_SendDirectMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDirectMessage'
type MockNotifier_SendDirectMessage_Call struct {
	*mock.Call
}

// SendDirectMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - message string
func (_e *MockNotifier_Expecter) SendDirectMessage(ctx interface{}, userID interface{}, message interface{}) *MockNotifier_SendDirectMessage_Call {
	return &MockNotifier_SendDirectMessage_Call{Call: _e.mock.On("SendDirectMessage", ctx, userID, message)}
}

func (_c *MockNotifier_SendDirectMessage_Call) Run(run func(ctx context.Context, userID string, message string)) *MockNotifier_SendDirectMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNotifier_SendDirectMessage_Call) Return(_a0 error) *MockNotifier_SendDirectMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_SendDirectMessage_Call) RunAndReturn(run func(context.Context, string, string) error) *MockNotifier_SendDirectMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendNotification provides a mock function with given fields: channelID, message
func (_m *MockNotifier) SendNotification(channelID string, message string) (string, error) {
	ret := _m.Called(channelID, message)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(channelID, message)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(channelID, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotifier_SendNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotification'
type MockNotifier_SendNotification_Call struct {
	*mock.Call
}

// SendNotification is a helper method to define mock.On call
//   - channelID string
//   - message string
func (_e *MockNotifier_Expecter) SendNotification(channelID interface{}, message interface{}) *MockNotifier_SendNotification_Call {
	return &MockNotifier_SendNotification_Call{Call: _e.mock.On("SendNotification", channelID, message)}
}

func (_c *MockNotifier_SendNotification_Call) Run(run func(channelID string, message string)) *MockNotifier_SendNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockNotifier_SendNotification_Call) Return(_a0 string, _a1 error) *MockNotifier_SendNotification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotifier_SendNotification_Call) RunAndReturn(run func(string, string) (string, error)) *MockNotifier_SendNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SendNotificationEmbed provides a mock function with given fields: ctx, channelID, embed
func (_m *MockNotifier) SendNotificationEmbed(ctx context.Context, channelID string, embed interfaces.EmbedData) (string, error) {
	ret := _m.Called(ctx, channelID, embed)

	if len(ret) == 0 {
		panic("no return value specified for SendNotificationEmbed")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interfaces.EmbedData) (string, error)); ok {
		return rf(ctx, channelID, embed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interfaces.EmbedData) string); ok {
		r0 = rf(ctx, channelID, embed)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interfaces.EmbedData) error); ok {
		r1 = rf(ctx, channelID, embed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotifier_SendNotificationEmbed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotificationEmbed'
type MockNotifier_SendNotificationEmbed_Call struct {
	*mock.Call
}

// SendNotificationEmbed is a helper method to define mock.On call
//   - ctx context.Context
//   - channelID string
//   - embed interfaces.EmbedData
func (_e *MockNotifier_Expecter) SendNotificationEmbed(ctx interface{}, channelID interface{}, embed interface{}) *MockNotifier_SendNotificationEmbed_Call {
	return &MockNotifier_SendNotificationEmbed_Call{Call: _e.mock.On("SendNotificationEmbed", ctx, channelID, embed)}
}

func (_c *MockNotifier_SendNotificationEmbed_Call) Run(run func(ctx context.Context, channelID string, embed interfaces.EmbedData)) *MockNotifier_SendNotificationEmbed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interfaces.EmbedData))
	})
	return _c
}

func (_c *MockNotifier_SendNotificationEmbed_Call) Return(_a0 string, _a1 error) *MockNotifier_SendNotificationEmbed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotifier_SendNotificationEmbed_Call) RunAndReturn(run func(context.Context, string, interfaces.EmbedData) (string, error)) *MockNotifier_SendNotificationEmbed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotifier creates a new instance of MockNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotifier {
	mock := &MockNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
