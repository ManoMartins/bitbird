// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Notifier is an autogenerated mock type for the Notifier type
type Notifier struct {
	mock.Mock
}

// AddApprovalEmoji provides a mock function with given fields: messageId
func (_m *Notifier) AddApprovalEmoji(messageId string) error {
	ret := _m.Called(messageId)

	if len(ret) == 0 {
		panic("no return value specified for AddApprovalEmoji")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddChangeRequestEmoji provides a mock function with given fields: messageId
func (_m *Notifier) AddChangeRequestEmoji(messageId string) error {
	ret := _m.Called(messageId)

	if len(ret) == 0 {
		panic("no return value specified for AddChangeRequestEmoji")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendCommentNotification provides a mock function with given fields: messageId, comment
func (_m *Notifier) SendCommentNotification(messageId string, comment string) error {
	ret := _m.Called(messageId, comment)

	if len(ret) == 0 {
		panic("no return value specified for SendCommentNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(messageId, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNotification provides a mock function with given fields: message
func (_m *Notifier) SendNotification(message string) (string, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotifier creates a new instance of Notifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Notifier {
	mock := &Notifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
