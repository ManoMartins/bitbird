// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	jira "github.com/andygrunwald/go-jira"
	mock "github.com/stretchr/testify/mock"

	work "github.com/manomartins/bitbird/internal/work"
)

// IssueService is an autogenerated mock type for the IssueService type
type IssueService struct {
	mock.Mock
}

// GetFirstIssueByCodeBase provides a mock function with given fields: base
func (_m *IssueService) GetFirstIssueByCodeBase(base work.CodeBase) *jira.Issue {
	ret := _m.Called(base)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstIssueByCodeBase")
	}

	var r0 *jira.Issue
	if rf, ok := ret.Get(0).(func(work.CodeBase) *jira.Issue); ok {
		r0 = rf(base)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.Issue)
		}
	}

	return r0
}

// NewIssueService creates a new instance of IssueService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIssueService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IssueService {
	mock := &IssueService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
