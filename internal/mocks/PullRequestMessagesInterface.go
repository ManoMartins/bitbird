// Code generated by mockery v2.45.0. DO NOT EDIT.

package interfaces

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/manomartins/bitbird/internal/app/model"
)

// MockPullRequestMessagesInterface is an autogenerated mock type for the PullRequestMessagesInterface type
type MockPullRequestMessagesInterface struct {
	mock.Mock
}

type MockPullRequestMessagesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPullRequestMessagesInterface) EXPECT() *MockPullRequestMessagesInterface_Expecter {
	return &MockPullRequestMessagesInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, prID, channelID, messageID
func (_m *MockPullRequestMessagesInterface) Create(ctx context.Context, prID string, channelID string, messageID string) error {
	ret := _m.Called(ctx, prID, channelID, messageID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, prID, channelID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPullRequestMessagesInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPullRequestMessagesInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - prID string
//   - channelID string
//   - messageID string
func (_e *MockPullRequestMessagesInterface_Expecter) Create(ctx interface{}, prID interface{}, channelID interface{}, messageID interface{}) *MockPullRequestMessagesInterface_Create_Call {
	return &MockPullRequestMessagesInterface_Create_Call{Call: _e.mock.On("Create", ctx, prID, channelID, messageID)}
}

func (_c *MockPullRequestMessagesInterface_Create_Call) Run(run func(ctx context.Context, prID string, channelID string, messageID string)) *MockPullRequestMessagesInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockPullRequestMessagesInterface_Create_Call) Return(_a0 error) *MockPullRequestMessagesInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPullRequestMessagesInterface_Create_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockPullRequestMessagesInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields:
func (_m *MockPullRequestMessagesInterface) FindAll() ([]model.PullRequestMessageModel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []model.PullRequestMessageModel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.PullRequestMessageModel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.PullRequestMessageModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PullRequestMessageModel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPullRequestMessagesInterface_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockPullRequestMessagesInterface_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockPullRequestMessagesInterface_Expecter) FindAll() *MockPullRequestMessagesInterface_FindAll_Call {
	return &MockPullRequestMessagesInterface_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockPullRequestMessagesInterface_FindAll_Call) Run(run func()) *MockPullRequestMessagesInterface_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPullRequestMessagesInterface_FindAll_Call) Return(_a0 []model.PullRequestMessageModel, _a1 error) *MockPullRequestMessagesInterface_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPullRequestMessagesInterface_FindAll_Call) RunAndReturn(run func() ([]model.PullRequestMessageModel, error)) *MockPullRequestMessagesInterface_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: prID
func (_m *MockPullRequestMessagesInterface) GetById(prID string) (*model.PullRequestMessageModel, error) {
	ret := _m.Called(prID)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *model.PullRequestMessageModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.PullRequestMessageModel, error)); ok {
		return rf(prID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.PullRequestMessageModel); ok {
		r0 = rf(prID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PullRequestMessageModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPullRequestMessagesInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockPullRequestMessagesInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - prID string
func (_e *MockPullRequestMessagesInterface_Expecter) GetById(prID interface{}) *MockPullRequestMessagesInterface_GetById_Call {
	return &MockPullRequestMessagesInterface_GetById_Call{Call: _e.mock.On("GetById", prID)}
}

func (_c *MockPullRequestMessagesInterface_GetById_Call) Run(run func(prID string)) *MockPullRequestMessagesInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPullRequestMessagesInterface_GetById_Call) Return(_a0 *model.PullRequestMessageModel, _a1 error) *MockPullRequestMessagesInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPullRequestMessagesInterface_GetById_Call) RunAndReturn(run func(string) (*model.PullRequestMessageModel, error)) *MockPullRequestMessagesInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields:
func (_m *MockPullRequestMessagesInterface) Save() {
	_m.Called()
}

// MockPullRequestMessagesInterface_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockPullRequestMessagesInterface_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
func (_e *MockPullRequestMessagesInterface_Expecter) Save() *MockPullRequestMessagesInterface_Save_Call {
	return &MockPullRequestMessagesInterface_Save_Call{Call: _e.mock.On("Save")}
}

func (_c *MockPullRequestMessagesInterface_Save_Call) Run(run func()) *MockPullRequestMessagesInterface_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPullRequestMessagesInterface_Save_Call) Return() *MockPullRequestMessagesInterface_Save_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPullRequestMessagesInterface_Save_Call) RunAndReturn(run func()) *MockPullRequestMessagesInterface_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: prID, channelID, messageID
func (_m *MockPullRequestMessagesInterface) Update(prID string, channelID string, messageID string) error {
	ret := _m.Called(prID, channelID, messageID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(prID, channelID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPullRequestMessagesInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPullRequestMessagesInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - prID string
//   - channelID string
//   - messageID string
func (_e *MockPullRequestMessagesInterface_Expecter) Update(prID interface{}, channelID interface{}, messageID interface{}) *MockPullRequestMessagesInterface_Update_Call {
	return &MockPullRequestMessagesInterface_Update_Call{Call: _e.mock.On("Update", prID, channelID, messageID)}
}

func (_c *MockPullRequestMessagesInterface_Update_Call) Run(run func(prID string, channelID string, messageID string)) *MockPullRequestMessagesInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPullRequestMessagesInterface_Update_Call) Return(_a0 error) *MockPullRequestMessagesInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPullRequestMessagesInterface_Update_Call) RunAndReturn(run func(string, string, string) error) *MockPullRequestMessagesInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPullRequestMessagesInterface creates a new instance of MockPullRequestMessagesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPullRequestMessagesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPullRequestMessagesInterface {
	mock := &MockPullRequestMessagesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
